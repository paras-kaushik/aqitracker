{"version":3,"sources":["components/App.js","index.js"],"names":["App","props","pollingInterval","URL","connect","connectInterval","socketObject","WebSocket","thisref","onopen","setState","clearTimeout","onmessage","e","live_data","JSON","parse","data","state","currentTime","Date","forEach","liveObj","index","row","filter","obj","city","updatedAt","aqi","push","sort","a","b","onclose","pi","setTimeout","readyState","CLOSED","Math","min","onerror","err","console","error","message","close","getColorAccordingToAqi","className","getUpdatedAt","currentHour","getHours","currentMinute","getMinutes","currentSecond","getSeconds","objectDataHour","objectDataMinute","objectDataSecond","this","Container","Table","responsive","bordered","hover","map","toFixed","length","colSpan","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96d1dd43.chunk.js","sourcesContent":["import React from \"react\";\nimport { Container, Table } from \"reactstrap\";\nimport \"../assets/App.css\";\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      socketObject: null,\n      data: [],\n    };\n  }\n  componentDidMount() {\n    this.connect();\n  }\n  pollingInterval = 1000;\n  URL = `ws://city-ws.herokuapp.com/`;\n  connect = () => {\n    var socketObject = new WebSocket(this.URL);\n    var connectInterval;\n    let thisref = this;\n\n    socketObject.onopen = () => {\n      this.setState({ socketObject });\n      thisref.pollingInterval = 1000;\n      clearTimeout(connectInterval);\n    };\n    socketObject.onmessage = (e) => {\n      const live_data = JSON.parse(e.data);\n      var { data } = this.state;\n      const currentTime = new Date();\n\n      live_data.forEach((liveObj, index) => {\n        let row = data.filter((obj) => obj.city === liveObj.city)[0];\n        /*For each object in live data we check if there exists its entry in data  */\n        liveObj.updatedAt = currentTime;\n\n        if (row) {\n          // liveObj data city already had an entry aginst it\n          row.aqi = liveObj.aqi;\n          row.updatedAt = liveObj.updatedAt;\n        } else {\n          data.push(liveObj);\n        }\n      });\n      data.sort((a, b) => b.aqi - a.aqi);\n      this.setState({ data });\n    };\n    socketObject.onclose = (e) => {\n      let pi = thisref.pollingInterval;\n      pi *= 2;\n      connectInterval = setTimeout(() => {\n        const { socketObject } = this.state;\n        if (!socketObject || socketObject.readyState === WebSocket.CLOSED)\n          this.connect();\n      }, Math.min(10000, pi));\n    };\n    socketObject.onerror = (err) => {\n      console.error(\n        \"Socket encountered error: \",\n        err.message,\n        \"Closing socket\"\n      );\n      socketObject.close();\n    };\n  };\n\n  getColorAccordingToAqi = (aqi) => {\n    var className;\n    switch (true) {\n      case aqi <= 50:\n        className = \"good\";\n        break;\n      case aqi <= 100:\n        className = \"satisfactory\";\n        break;\n      case aqi <= 200:\n        className = \"moderate\";\n        break;\n      case aqi <= 300:\n        className = \"poor\";\n        break;\n      case aqi <= 400:\n        className = \"very-poor\";\n        break;\n      default:\n        className = \"severe\";\n    }\n    return `primary-text ${className}`;\n  };\n\n  getUpdatedAt = (obj) => {\n    const currentTime = new Date();\n    // current timestamps\n    const currentHour = currentTime.getHours();\n    const currentMinute = currentTime.getMinutes();\n    const currentSecond = currentTime.getSeconds();\n    //object data time stamps\n    const objectDataHour = obj.updatedAt.getHours();\n    const objectDataMinute = obj.updatedAt.getMinutes();\n    const objectDataSecond = obj.updatedAt.getSeconds();\n    var updatedAt;\n    switch (\n      true // switch case on expressions rather than values\n    ) {\n      case currentHour !== objectDataHour:\n        updatedAt = `${obj.updatedAt.getHours()}:00`;\n        break;\n      case objectDataMinute !== currentMinute &&\n        objectDataMinute + 1 !== currentMinute:\n        updatedAt = \"Few minutes ago\";\n        break;\n      case objectDataMinute + 1 === currentMinute ||\n        currentSecond > 30 + objectDataSecond:\n        updatedAt = \"A minute ago\";\n        break;\n      case objectDataSecond === currentSecond:\n        updatedAt = \"Just now\";\n        break;\n      case objectDataSecond - 10 < currentSecond < objectDataSecond + 10:\n        updatedAt = \"few seconds ago\";\n        break;\n      default:\n        updatedAt = \"A Day ago\";\n    }\n    return updatedAt;\n  };\n\n  render() {\n    let { data } = this.state;\n    return (\n      <Container className=\"mt-3 p-4\">\n        <Table className=\"align-items-center\" responsive bordered hover>\n          <thead>\n            <tr>\n              <th className=\"text-center spaced-text\">City</th>\n              <th className=\"text-center spaced-text\">Current AQI</th>\n              <th className=\"text-center spaced-text\">Last Updated</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.map((obj, index) => (\n              <tr>\n                <th className=\"text-center spaced-text\">{obj.city}</th>\n                <td\n                  className={\n                    this.getColorAccordingToAqi(obj.aqi) + \" spaced-text\"\n                  }\n                >\n                  {obj.aqi.toFixed(2)}\n                </td>\n                <td className=\"text-center spaced-text\">\n                  {this.getUpdatedAt(obj)}\n                </td>\n              </tr>\n            ))}\n            {data.length === 0 ? (\n              <tr>\n                <td colSpan=\"3\" className=\"p-4 text-center\">\n                  No data available\n                </td>\n              </tr>\n            ) : null}\n          </tbody>\n        </Table>\n      </Container>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./assets/index.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}